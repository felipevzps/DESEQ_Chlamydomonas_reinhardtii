library("NOISeq")
install.packages(NOISeq)
install.packages("NOISeq")
install.packages("noiseq")
sessionInfo()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("NOISeq")
install.packages("tidyverse")
install.packages("ragg")
install.packages("systemfonts")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("NOISeq")
library("tidyverse")
data(Marioni)
View(mychroms)
View(mycounts)
View(myfactors)
View(mychroms)
View(myfactors)
View(mycounts)
head(mycounts)
columnHeaders <- write.csv(head(mycounts), file ="headers.csv")
ls
View(experimentalMatrix)
experimentalMatrix <- read.csv("/home/felipevzps/Documentos/NOISeq_Chlamydomonas_reinhardtii/experimentalMatrix.csv")
View(experimentalMatrix)
experimentalMatrix
?readData
#Convert your generic data frame into a NOISeq object
myData<-readData(data=mycounts, length=mylength, gc=mygc, biotype=mybiotypes, chromosome=mychroms, factors=myfactors)
myData
myDataMyFactors <- readData(data=mycounts, factors=experimentalMatrix)
myDataMyFactors
mybiodetection <- dat(myDataMyFactors, k = 0, type = "biodetection", factor = NULL)
mybiodetection <- dat(myData, k = 0, type = "biodetection", factor = NULL)
#Data exploration and quality
mycountsbio = dat(myDataMyFactors, factor = NULL, type = "countsbio")
#Data exploration and quality
mycountsbio = dat(myDataMyFactors, factor = NULL, type = "countsbio")
explo.plot(mycountsbio, toplot = "protein_coding", samples = NULL, plottype = "boxplot")
explo.plot(mycountsbio, toplot = "Aa", samples = NULL, plottype = "boxplot")
#Data exploration and quality
mycountsbio = dat(myData, factor = NULL, type = "countsbio")
explo.plot(mycountsbio, toplot = "protein_coding", samples = NULL, plottype = "boxplot")
myPCA = dat(myDataMyFactors, type = "PCA")
explo.plot(myPCA, factor = "Tissue")
#Looking at the NOISeq object we created with our own factors, let's also look at `Run` and `Lane`
myPCA2 = dat(myDataMyFactors, type = "PCA")
par(mfrow = c(1, 2))
explo.plot(myPCA2, factor = "Run")
explo.plot(myPCA2, factor = "Lane")
explo.plot(myPCA2, factor = "Tissue")
explo.plot(myPCA2, factor = "Lane")
explo.plot(myPCA2, factor = "Tissue")
explo.plot(myPCA2, factor = "Lane")
explo.plot(myPCA2, factor = "Run")
#Function to plot multiple figures
par(mfrow = c(1, 2, 3))
#Function to plot multiple figures
par(mfrow = c(1, 3))
explo.plot(myPCA2, factor = "Tissue")
explo.plot(myPCA2, factor = "Lane")
explo.plot(myPCA2, factor = "Run")
#to see in console
QCreport(myDataMyFactors, samples = NULL, factor = "Tissue", norm = FALSE)
#to export as a pdf with a custom name
QCreport(myDataMyFactors, file="QCreportForRNASeqWithNOISeq.pdf", samples = NULL, factor = "Tissue", norm=FALSE)
#to see in console
QCreport(myDataMyFactors, samples = NULL, factor = "Tissue", norm = FALSE)
#RPKM = reads per kilobase of transcript, per million mapped reads.
myRPKM = rpkm(assayData(myDataMyFactors)$exprs, long = mylength, k = 0, lc = 1)
head(myRPKM)
head(myRPKM[,1:4])
head(mycounts[,1:4])
# depth = sequencing depth of samples (column totals before normalizing), used in low count feature filter methods 2 & 3
# cv.cutoff = cutoff for coefficient of variation used in method 1
# cpm = cutoff for low expression in counts per million (used in methods 1 & 3)
# p.adj = method for multiple testing correction
myfactors
experimentalMatrix
mycounts
myfilt = filtered.data(mycounts, factor = myfactors$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
View(myfilt)
head(myRPKM[,1:4])
myfilt = filtered.data(mycounts, factor = myRPKM$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
myfilt = filtered.data(myRPKM, factor = experimentalMatrix$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
View(myPCA)
View(myfilt)
View(myfilt)
#mycounts
myfilt = filtered.data(myRPKM, factor = experimentalMatrix$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
myfilt
#mycounts
myfilt = filtered.data(mycounts, factor = myfactors$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
View(myfilt)
#mycounts
myfilt = filtered.data(myRPKM, factor = experimentalMatrix$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
myfilt
#mycounts
myfilt = filtered.data(myRPKM, factor = experimentalMatrix$Tissue, norm=TRUE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
View(myfilt)
#mycounts
myfilt = filtered.data(myRPKM, factor = experimentalMatrix$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
myfilt
#mycounts
myfilt = filtered.data(myRPKM, factor = experimentalMatrix$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
#mycounts
myfilt = filtered.data(mycounts, factor = myfactors$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
#NOISeq with technical replicates
mynoiseqTech = noiseq(myDataMyFactors, k = 0.5, norm = "rpkm", factor = "Tissue", pnr = 0.2, nss = 5, v = 0.02, lc = 1, replicates = "technical")
head(mynoiseqTech@results[[1]])
mynoiseqTech.deg = degenes(mynoiseqTech, q = 0.8, M = NULL)
par(mfrow = c(1, 2))
#Plot expression with DEGs highlighted in red
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
#Plot expression with DEGs highlighted in red
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
#Plot expression with DEGs highlighted in red
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
#Plot expression with DEGs highlighted in red
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
par(mfrow = c(1))
par(mfrow = c(0, 1))
par(mfrow = c(1))
par(mfrow = c(1,2))
#Plot expression with DEGs highlighted in red
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
#Plot expression with DEGs highlighted in red
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
#Plot expression with DEGs highlighted in red
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
#export results to archive or for downstream analyses
#recall that for this particular output, the object mynoiseq.deg was filtered for q>= 0.8. For the complete gene list, use the `degenes` function above and set q = 0.
write.csv(mynoiseqTech.deg, file="DEGs_NOISeqTech.csv")
ls
head(mycounts)
experimentalMatrix <- read.csv("/home/felipevzps/Documentos/NOISeq_Chlamydomonas_reinhardtii/tutorial/experimentalMatrix.csv")
setwd("/home/felipevzps/Documentos/NOISeq_Chlamydomonas_reinhardtii/tutorial")
setwd("/home/felipevzps/Documentos/NOISeq_Chlamydomonas_reinhardtii/tutorial")
ls
head(mycounts)
setwd("/home/felipevzps/Documentos/DESEQ_Chlamydomonas_reinhardtii/DESeq2")
targets<-read.csv("target_sem_48.csv",header=TRUE)
rownames(targets)<-targets$SampleName
targets
columnHeaders <- write.csv(head(mycounts), file ="headers.csv")
head(mycounts)
experimentalMatrix
setwd("/home/felipevzps/Documentos/NOISeq_Chlamydomonas_reinhardtii")
experimentalMatrix<-read.csv("target.csv",header=TRUE)
#rownames(targets)<-targets$SampleName
experimentalMatrix
#rownames(targets)<-targets$SampleName
View(experimentalMatrix)
experimentalMatrix(targets)<-targets$SampleName
experimentalMatrix<-read.csv("target.csv",header=TRUE)
experimentalMatrix
rownames(experimentalMatrix)<-targets$SampleName
rownames(experimentalMatrix)<-experimentalMatrix$SampleName
View(experimentalMatrix)
experimentalMatrix
files <- paste("/home/felipevzps/Documentos/DESEQ_Chlamydomonas_reinhardtii/DESeq2/", targets$SampleName, "/quant.sf",sep="")
tx2gene<-read.delim("transcript2gene.txt",header=FALSE)
tx2gene<-read.delim("transcript2gene.txt",header=FALSE)
names(files) <- targets$SampleName
all(file.exists(files))
library(tximport)
library(tximport)
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene, txOut=FALSE)
head(txi.salmon$abundance)
Chla_TPM<-txi.salmon$abundance
txi.salmon$abundance
Chla_TPM
txi.salmon$abundance
Chla_TPM
#Convert your generic data frame into a NOISeq object
myDataMyFactors <- readData(data=Chla_TPM, factors=experimentalMatrix)
experimentalMatrix
Chla_TPM #mycounts
head(mycounts)
experimentalMatrix <- read.csv("/home/felipevzps/Documentos/NOISeq_Chlamydomonas_reinhardtii/experimentalMatrix.csv")
experimentalMatrix <- read.csv("/home/felipevzps/Documentos/NOISeq_Chlamydomonas_reinhardtii/tutorial/experimentalMatrix.csv")
View(experimentalMatrix)
head(mycounts)
experimentalMatrix
Chla_TPM #mycounts
experimentalMatrix
experimentalMatrix<-read.csv("target.csv",header=TRUE)
rownames(experimentalMatrix)<-experimentalMatrix$SampleName
View(experimentalMatrix)
experimentalMatrix
files <- paste("/home/felipevzps/Documentos/DESEQ_Chlamydomonas_reinhardtii/DESeq2/", targets$SampleName, "/quant.sf",sep="")
tx2gene<-read.delim("transcript2gene.txt",header=FALSE)
names(files) <- targets$SampleName
all(file.exists(files))
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene, txOut=FALSE)
head(txi.salmon$abundance)
Chla_TPM<-txi.salmon$abundance
Chla_TPM #mycounts
#Convert your generic data frame into a NOISeq object
myDataMyFactors <- readData(data=Chla_TPM, factors=experimentalMatrix)
experimentalMatrix
Chla_TPM #mycounts
head(txi.salmon$abundance)
colnames(Chla_TPM)
head(txi.salmon$abundance)
rownames(experimentalMatrix)
colnames(Chla_TPM)
experimentalMatrix<-read.csv("target.csv",header=TRUE)
rownames(experimentalMatrix)<-experimentalMatrix$SampleName
experimentalMatrix
rownames(experimentalMatrix)
colnames(Chla_TPM)
files <- paste("/home/felipevzps/Documentos/DESEQ_Chlamydomonas_reinhardtii/DESeq2/", experimentalMatrix$SampleName, "/quant.sf",sep="")
tx2gene<-read.delim("transcript2gene.txt",header=FALSE)
names(files) <- targets$SampleName
all(file.exists(files))
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene, txOut=FALSE)
head(txi.salmon$abundance)
Chla_TPM<-txi.salmon$abundance
Chla_TPM #mycounts
rownames(experimentalMatrix)
colnames(Chla_TPM)
rownames(experimentalMatrix)
setwd("/home/felipevzps/Documentos/NOISeq_Chlamydomonas_reinhardtii")
experimentalMatrix<-read.csv("target.csv",header=TRUE)
View(experimentalMatrix)
rownames(experimentalMatrix)<-experimentalMatrix$SampleName
View(experimentalMatrix)
experimentalMatrix
files <- paste("/home/felipevzps/Documentos/DESEQ_Chlamydomonas_reinhardtii/DESeq2/", experimentalMatrix$SampleName, "/quant.sf",sep="")
files
tx2gene<-read.delim("transcript2gene.txt",header=FALSE)
names(files) <- targets$SampleName
names(files) <- experimentalMatrix$SampleName
all(file.exists(files))
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene, txOut=FALSE)
head(txi.salmon$abundance)
Chla_TPM<-txi.salmon$abundance
Chla_TPM #mycounts
rownames(experimentalMatrix)
colnames(Chla_TPM)
#Convert your generic data frame into a NOISeq object
myDataMyFactors <- readData(data=Chla_TPM, factors=experimentalMatrix)
myDataMyFactors
myPCA = dat(myDataMyFactors, type = "PCA")
explo.plot(myPCA, factor = "Condition")
View(myDataMyFactors)
experimentalMatrix
#Looking at the NOISeq object we created with our own factors, let's also look at `Run` and `Lane`
#Function to plot multiple figures (1,3) for 3 figures
par(mfrow = c(1, 3))
explo.plot(myPCA2, factor = "Condition")
explo.plot(myPCA, factor = "Condition")
explo.plot(myPCA, factor = "Time")
explo.plot(myPCA, factor = "Sample")
explo.plot(myPCA, factor = "Condition")
#RPKM = reads per kilobase of transcript, per million mapped reads.
myRPKM = rpkm(assayData(myDataMyFactors)$exprs, long = mylength, k = 0, lc = 1)
#RPKM = reads per kilobase of transcript, per million mapped reads.
myRPKM = rpkm(assayData(myDataMyFactors)$exprs, k = 0, lc = 1)
head(myRPKM[,1:4])
#compare this to the original raw count data we started with
head(Chla_TPM[,1:4])
head(myRPKM[,1:4])
#compare this to the original raw count data we started with
head(Chla_TPM[,1:4])
#mycounts
myfilt = filtered.data(Chla_TPM, factor = myfactors$Tissue, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
#mycounts
myfilt = filtered.data(Chla_TPM, factor = myfactors$Condition, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
#mycounts
myfilt = filtered.data(Chla_TPM, factor = experimentalMatrix$Condition, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
myfilt
#NOISeq with technical replicates
mynoiseqTech = noiseq(myDataMyFactors, k = 0.5, norm = "rpkm", factor = "Condition", pnr = 0.2, nss = 5, v = 0.02, lc = 1, replicates = "technical")
head(mynoiseqTech@results[[1]])
mynoiseqTech.deg = degenes(mynoiseqTech, q = 0.8, M = NULL)
m
#Plot expression with DEGs highlighted in red
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
#Plot expression with DEGs highlighted in red
par(mfrow = c(1, 1))
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
#export results to archive or for downstream analyses
#recall that for this particular output, the object mynoiseq.deg was filtered for q>= 0.8. For the complete gene list, use the `degenes` function above and set q = 0.
write.csv(mynoiseqTech.deg, file="DEGs_NOISeqTech.csv")
#to export as a pdf with a custom name
QCreport(myDataMyFactors, file="NOISeqQCreport_Chlamydomonas.pdf", samples = NULL, factor = "Tissue", norm=FALSE)
#to export as a pdf with a custom name
QCreport(myDataMyFactors, file="NOISeqQCreport_Chlamydomonas.pdf", samples = NULL, factor = "Condition", norm=FALSE)
library(tximport)
library(NOISeq)
library(tidyverse)
setwd("/home/felipevzps/Documentos/NOISeq_Chlamydomonas_reinhardtii")
setwd("/home/felipevzps/Documentos/DESEQ_Chlamydomonas_reinhardtii/NOISeq_Chlamydomonas_reinhardtii")
experimentalMatrix<-read.csv("target.csv",header=TRUE)
rownames(experimentalMatrix)<-experimentalMatrix$SampleName
experimentalMatrix
files <- paste("/home/felipevzps/Documentos/DESEQ_Chlamydomonas_reinhardtii/DESeq2/", experimentalMatrix$SampleName, "/quant.sf",sep="")
tx2gene<-read.delim("transcript2gene.txt",header=FALSE)
names(files) <- experimentalMatrix$SampleName
all(file.exists(files))
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene, txOut=FALSE)
head(txi.salmon$abundance)
Chla_TPM<-txi.salmon$abundance
Chla_TPM #mycounts
rownames(experimentalMatrix)
colnames(Chla_TPM)
#Convert your generic data frame into a NOISeq object
myDataMyFactors <- readData(data=Chla_TPM, factors=experimentalMatrix)
myDataMyFactors
myPCA = dat(myDataMyFactors, type = "PCA")
explo.plot(myPCA, factor = "Condition")
#Looking at the NOISeq object we created with our own factors, let's also look at `Run` and `Lane`
#Function to plot multiple figures (1,3) for 3 figures
par(mfrow = c(1, 3))
explo.plot(myPCA, factor = "Condition")
explo.plot(myPCA, factor = "Time")
explo.plot(myPCA, factor = "Sample")
#Plot expression with DEGs highlighted in red
par(mfrow = c(1, 1))
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
#RPKM = reads per kilobase of transcript, per million mapped reads.
myRPKM = rpkm(assayData(myDataMyFactors)$exprs, k = 0, lc = 1)
head(myRPKM[,1:4])
#compare this to the original raw count data we started with
head(Chla_TPM[,1:4])
#mycounts
myfilt = filtered.data(Chla_TPM, factor = experimentalMatrix$Condition, norm=FALSE, depth=NULL, method=1, cv.cutoff=100, cpm=1, p.adj="fdr")
myfilt
#NOISeq with technical replicates
mynoiseqTech = noiseq(myDataMyFactors, k = 0.5, norm = "rpkm", factor = "Condition", pnr = 0.2, nss = 5, v = 0.02, lc = 1, replicates = "technical")
head(mynoiseqTech@results[[1]])
mynoiseqTech.deg = degenes(mynoiseqTech, q = 0.8, M = NULL)
#Plot expression with DEGs highlighted in red
par(mfrow = c(1, 1))
DE.plot(mynoiseqTech, q = 0.8, graphic = "expr", log.scale = TRUE)
